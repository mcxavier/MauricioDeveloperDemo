// <auto-generated />
using System;
using Infra.EntitityConfigurations.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infra.Migrations
{
    [DbContext(typeof(CoreContext))]
    [Migration("20220524164847_LogGeral")]
    partial class LogGeral
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Domains.Log.LogGeral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("MessageJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceMessageId")
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.Property<string>("StoreCode")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("TopicId")
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("LogGeral","log");
                });

            modelBuilder.Entity("Core.Domains.Marketing.Models.CustomerNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Notified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("NotifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("StockKeepingUnit")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("StoreCode")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("StoreCode");

                    b.ToTable("CustomerNotification","marketing");
                });

            modelBuilder.Entity("Core.Domains.Ordering.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CatalogId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int");

                    b.Property<bool>("SendedToUx")
                        .HasColumnType("bit");

                    b.Property<decimal>("ShippingAmmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ShippingId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("StoreCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderTypeId");

                    b.HasIndex("PaymentId")
                        .IsUnique()
                        .HasFilter("[PaymentId] IS NOT NULL");

                    b.HasIndex("SellerId");

                    b.HasIndex("ShippingId");

                    b.HasIndex("StatusId");

                    b.ToTable("Orders","order");
                });

            modelBuilder.Entity("Core.Models.Core.Catalogs.Catalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BeginsAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumOfPieces")
                        .HasColumnType("int");

                    b.Property<int?>("NumOfSales")
                        .HasColumnType("int");

                    b.Property<decimal?>("Revenues")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int");

                    b.Property<string>("SentContacts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Catalogs","catalog");
                });

            modelBuilder.Entity("Core.Models.Core.Catalogs.CatalogCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CatalogId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("Received")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CatalogCustomer","catalog");
                });

            modelBuilder.Entity("Core.Models.Core.Catalogs.CatalogProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CatalogId")
                        .HasColumnType("int");

                    b.Property<int?>("CatalogId1")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.HasIndex("CatalogId1");

                    b.HasIndex("ProductId");

                    b.ToTable("CatalogProduct","catalog");
                });

            modelBuilder.Entity("Core.Models.Core.Customers.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cpf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers","customer");
                });

            modelBuilder.Entity("Core.Models.Core.Customers.CustomersOrderHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GrossValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("NetValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderOrigin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StockKeepingUnit")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StoreCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Units")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StockKeepingUnit");

                    b.ToTable("OrderHistory","customer");
                });

            modelBuilder.Entity("Core.Models.Core.Customers.Seller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OriginId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sellers","customer");
                });

            modelBuilder.Entity("Core.Models.Core.Geography.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DistrictName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(8)")
                        .HasMaxLength(8);

                    b.HasKey("Id");

                    b.ToTable("Addresses","geography");
                });

            modelBuilder.Entity("Core.Models.Core.Messages.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("IntegrationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Conversations","conversation");
                });

            modelBuilder.Entity("Core.Models.Core.Messages.ConversationMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SendAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.ToTable("Messages","conversation");
                });

            modelBuilder.Entity("Core.Models.Core.Ordering.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductVariationId")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StockKeepingUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("UnitDiscount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Units")
                        .HasColumnType("int");

                    b.Property<string>("UrlPicture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVariationId");

                    b.ToTable("Items","order");
                });

            modelBuilder.Entity("Core.Models.Core.Ordering.OrderItemDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiscountTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DiscountTypeId");

                    b.HasIndex("OrderItemId");

                    b.ToTable("ItemDiscounts","order");
                });

            modelBuilder.Entity("Core.Models.Core.Ordering.OrderItemDiscountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("ItemDiscountTypes","order");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Campaign"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Discount"
                        });
                });

            modelBuilder.Entity("Core.Models.Core.Ordering.OrderShipping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("OrderId");

                    b.ToTable("Shippings","order");
                });

            modelBuilder.Entity("Core.Models.Core.Ordering.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Status","order");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pedido realizado"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Aguardando validação"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Separação em estoque"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Pedido pago"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Saída para entrega"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Cancelado"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Falha no pagamento"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Pedido finalizado"
                        });
                });

            modelBuilder.Entity("Core.Models.Core.Ordering.OrderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderType","order");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Shipment"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pickup"
                        });
                });

            modelBuilder.Entity("Core.Models.Core.Payments.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<int?>("CardBrandTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GatewayProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Installments")
                        .HasColumnType("bigint");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Pan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("StoreCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CardBrandTypeId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("StatusId");

                    b.ToTable("Payments","payment");
                });

            modelBuilder.Entity("Core.Models.Core.Payments.PaymentCardBrandType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CardBrandTypes","payment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Visa"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mastercard"
                        },
                        new
                        {
                            Id = 3,
                            Name = "AmericanExpress"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Jcb"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Discover"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Uknown"
                        });
                });

            modelBuilder.Entity("Core.Models.Core.Payments.PaymentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentStatus","payment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Processing"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Processed"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Failed"
                        });
                });

            modelBuilder.Entity("Core.Models.Core.Payments.PaymentTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Ammount")
                        .HasColumnType("int");

                    b.Property<long?>("AuthorizationCode")
                        .HasColumnType("bigint");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Installments")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nsu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Suplier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SuplierReturnCode")
                        .HasColumnType("int");

                    b.Property<int?>("SuplierReturnId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SuplierReturnId");

                    b.ToTable("Transactions","payment");
                });

            modelBuilder.Entity("Core.Models.Core.Payments.PaymentTransactionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransactionStatus","payment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Authorized"
                        },
                        new
                        {
                            Id = 2,
                            Name = "PreAuthorized"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Captured"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Canceled"
                        },
                        new
                        {
                            Id = 5,
                            Name = "NotAuthorized"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Reject"
                        },
                        new
                        {
                            Id = 7,
                            Name = "UnderInvestigation"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Unknown"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Release"
                        });
                });

            modelBuilder.Entity("Core.Models.Core.Payments.PaymentTransactionSupplierCodeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SupplierCodeTypes","payment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Transação não permitida para o emissor.",
                            Name = "NotAllowed"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Erro nos dados reportados.",
                            Name = "ErrorOnDataReported"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Problemas no credenciamento. Entre em contato com nosso suporte.",
                            Name = "ErrorOnCredentials"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Não Autorizado. O portador do cartão deve entrar em contato com o emissor do cartão.",
                            Name = "NotAuthorized"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Transação não permitida. Entre em contato com nosso suporte.",
                            Name = "TransactionNotAllowed"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Falha de Comunicação. Tente novamente.",
                            Name = "ComunicationFailure"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Cartão Expirado. O portador do cartão deve entrar em contato com o emissor do cartão.",
                            Name = "ExpiredCard"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Cartão Sem Limite. O portador do cartão deve entrar em contato com o emissor do cartão.",
                            Name = "CardLimitExceeded"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Problemas no Cartão. O portador do cartão deve entrar em contato com o emissor do cartão.",
                            Name = "CardProblems"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Não Autorizado. Tente novamente.",
                            Name = "NotAuthorizedTryAgain"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Não Autorizado. Cartão não existente.",
                            Name = "NotAuthorizedNonExistentCard"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Transação não autorizada.",
                            Name = "NotAuthorizedNoReason"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Não Autorizado. Risco identificado pelo emissor.",
                            Name = "NotAuthorizedIdentifiedRisk"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Transação não encontrada.",
                            Name = "TransactionNotFound"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Não Autorizado. Código de Segurança Inválido.",
                            Name = "NotAuthorizedInvalidSecurityNumber"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Número do Cartão Inválido",
                            Name = "InvalidCardNumber"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Erro no Processamento. Tente novamente.",
                            Name = "ProcessingError"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Transação enviada anteriormente",
                            Name = "TransactionSendBefore"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Transação não autorizada. Entre em contato com nosso suporte.",
                            Name = "NotAuthorizedCallSupport"
                        });
                });

            modelBuilder.Entity("Core.Models.Core.Payments.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymenTypes","payment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cartão de crédito"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cartão de Débito"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Boleto"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Pix"
                        });
                });

            modelBuilder.Entity("Core.Models.Core.Products.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories","product");
                });

            modelBuilder.Entity("Core.Models.Core.Products.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommonReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ncm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products","product");
                });

            modelBuilder.Entity("Core.Models.Core.Products.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategory","product");
                });

            modelBuilder.Entity("Core.Models.Core.Products.ProductDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductDetails","product");
                });

            modelBuilder.Entity("Core.Models.Core.Products.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsPrincipal")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductVariationId")
                        .HasColumnType("int");

                    b.Property<string>("UrlImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductVariationId");

                    b.ToTable("Images","product");
                });

            modelBuilder.Entity("Core.Models.Core.Products.ProductSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<bool>("IsFilter")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductVariationId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("Description");

                    b.HasIndex("ProductVariationId")
                        .HasAnnotation("SqlServer:Include", new[] { "TypeId", "Value" });

                    b.HasIndex("TypeId")
                        .HasAnnotation("SqlServer:Include", new[] { "ProductVariationId" });

                    b.HasIndex("Value");

                    b.ToTable("Specifications","product");
                });

            modelBuilder.Entity("Core.Models.Core.Products.ProductSpecificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SpecificationTypes","product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Size"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Color"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Gender"
                        },
                        new
                        {
                            Id = 4,
                            Name = "SimpleColor"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Others"
                        });
                });

            modelBuilder.Entity("Core.Models.Core.Products.ProductVariation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("BasePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("CompleteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("CostPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("ListPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("StockKeepingUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BasePrice");

                    b.HasIndex("IsActive")
                        .HasAnnotation("SqlServer:Include", new[] { "StockKeepingUnit", "BasePrice", "ProductId" });

                    b.HasIndex("ProductId")
                        .HasAnnotation("SqlServer:Include", new[] { "BasePrice", "IsActive" });

                    b.ToTable("Variations","product");
                });

            modelBuilder.Entity("Core.Models.Core.Products.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastSinc")
                        .HasColumnType("datetime2");

                    b.Property<string>("StockKeepingUnit")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("StoreCode")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<int>("Units")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StockKeepingUnit")
                        .HasAnnotation("SqlServer:Include", new[] { "Units" });

                    b.HasIndex("StoreCode")
                        .HasAnnotation("SqlServer:Include", new[] { "StockKeepingUnit" });

                    b.ToTable("Stock","product");
                });

            modelBuilder.Entity("Core.Domains.Ordering.Models.Order", b =>
                {
                    b.HasOne("Core.Models.Core.Catalogs.Catalog", "Catalog")
                        .WithMany()
                        .HasForeignKey("CatalogId");

                    b.HasOne("Core.Models.Core.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Core.Models.Core.Ordering.OrderType", "OrderType")
                        .WithMany()
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Core.Payments.Payment", "Payment")
                        .WithOne("Order")
                        .HasForeignKey("Core.Domains.Ordering.Models.Order", "PaymentId");

                    b.HasOne("Core.Models.Core.Customers.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId");

                    b.HasOne("Core.Models.Core.Ordering.OrderShipping", "Shipping")
                        .WithMany()
                        .HasForeignKey("ShippingId");

                    b.HasOne("Core.Models.Core.Ordering.OrderStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.Core.Catalogs.CatalogCustomer", b =>
                {
                    b.HasOne("Core.Models.Core.Catalogs.Catalog", "Catalog")
                        .WithMany("Customers")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Core.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.Core.Catalogs.CatalogProduct", b =>
                {
                    b.HasOne("Core.Models.Core.Catalogs.Catalog", "Catalog")
                        .WithMany()
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Core.Catalogs.Catalog", null)
                        .WithMany("Products")
                        .HasForeignKey("CatalogId1");

                    b.HasOne("Core.Models.Core.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.Core.Customers.CustomersOrderHistory", b =>
                {
                    b.HasOne("Core.Models.Core.Customers.Customer", "Customer")
                        .WithMany("OrderHistory")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Core.Models.Core.Products.ProductVariation", "Variation")
                        .WithMany()
                        .HasForeignKey("StockKeepingUnit")
                        .HasPrincipalKey("StockKeepingUnit");
                });

            modelBuilder.Entity("Core.Models.Core.Messages.Conversation", b =>
                {
                    b.HasOne("Core.Models.Core.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.Core.Messages.ConversationMessage", b =>
                {
                    b.HasOne("Core.Models.Core.Messages.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.Core.Ordering.OrderItem", b =>
                {
                    b.HasOne("Core.Domains.Ordering.Models.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Core.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Core.Models.Core.Products.ProductVariation", "ProductVariation")
                        .WithMany()
                        .HasForeignKey("ProductVariationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.Core.Ordering.OrderItemDiscount", b =>
                {
                    b.HasOne("Core.Models.Core.Ordering.OrderItemDiscountType", "DiscountType")
                        .WithMany()
                        .HasForeignKey("DiscountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Core.Ordering.OrderItem", "OrderItem")
                        .WithMany("DiscountItems")
                        .HasForeignKey("OrderItemId");
                });

            modelBuilder.Entity("Core.Models.Core.Ordering.OrderShipping", b =>
                {
                    b.HasOne("Core.Models.Core.Geography.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domains.Ordering.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.Core.Payments.Payment", b =>
                {
                    b.HasOne("Core.Models.Core.Payments.PaymentCardBrandType", "CardBrandType")
                        .WithMany()
                        .HasForeignKey("CardBrandTypeId");

                    b.HasOne("Core.Models.Core.Payments.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Core.Payments.PaymentStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.Core.Payments.PaymentTransaction", b =>
                {
                    b.HasOne("Core.Models.Core.Payments.Payment", "Payment")
                        .WithMany("Transactions")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Core.Payments.PaymentTransactionStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("Core.Models.Core.Payments.PaymentTransactionSupplierCodeType", "SuplierReturn")
                        .WithMany()
                        .HasForeignKey("SuplierReturnId");
                });

            modelBuilder.Entity("Core.Models.Core.Products.ProductCategory", b =>
                {
                    b.HasOne("Core.Models.Core.Products.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Core.Products.Product", "Product")
                        .WithMany("Categories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.Core.Products.ProductImage", b =>
                {
                    b.HasOne("Core.Models.Core.Products.ProductVariation", "ProductVariation")
                        .WithMany("Images")
                        .HasForeignKey("ProductVariationId");
                });

            modelBuilder.Entity("Core.Models.Core.Products.ProductSpecification", b =>
                {
                    b.HasOne("Core.Models.Core.Products.ProductVariation", "ProductVariation")
                        .WithMany("Specifications")
                        .HasForeignKey("ProductVariationId");

                    b.HasOne("Core.Models.Core.Products.ProductSpecificationType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("Core.Models.Core.Products.ProductVariation", b =>
                {
                    b.HasOne("Core.Models.Core.Products.Product", "Product")
                        .WithMany("Variations")
                        .HasForeignKey("ProductId");
                });
#pragma warning restore 612, 618
        }
    }
}
